<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui">

<head>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" />
<h:form method="post" id="homeform">
	<h:commandButton value="Home" class="btn btn-primary pull-left"
		action="#{userController.goToIndexD()}"
		style="float: left;text-decoration:none; padding:5px;" />
	<h:commandButton value="Back" class="btn btn-primary pull-left"
		action="#{userController.goToMyRoutes()}"
		style="float: left;text-decoration:none; padding:5px;" />
</h:form>
<title><ui:insert name="title">Rit view</ui:insert></title>
<meta name="viewport" content="initial-scale=1.0" />
<meta charset="utf-8" />
<f:metadata>
	<f:viewParam name="rit" value="#{tirController.tir.id}" />
	<f:viewAction action="#{tirController.findRit}" />
	<f:viewAction action="#{tirController.setTussenstops()}" />
</f:metadata>
</head>
<body>
	<script
		src="https://www.paypal.com/sdk/js?client-id=AZeJi_oALA_e2d8PoyjJ8-1Imn4NXJPU_mkwKTSccLUf4DMo37kr2XQ3U9bfXLCLrsSTWpfYm6qtRDFm">
		// Required. Replace SB_CLIENT_ID with your sandbox client ID.
	</script>
	<div class="jumbotron jumbotron-sm">
		<div class="container">
			<div class="row">
				<div class="col-sm-12 col-lg-12">

					<h1 class="h1">
						Drive to: #{tirController.tir.route.eindpunt} <small></small>
					</h1>
				</div>
			</div>
		</div>
	</div>
	<div class="container">
		<div class="row">
			<div class="col-md-8">
				<div class="well well-sm">
					<div class="row">
						<h:inputHidden id="hidden-beginpunt"
							value="#{tirController.tir.beginpunt}"></h:inputHidden>
						<h:inputHidden id="hidden-eindpunt"
							value="#{tirController.tir.eindpunt}"></h:inputHidden>
						<h:inputHidden id="hidden-start"
							value="#{tirController.tir.route.beginpunt}"></h:inputHidden>
						<h:inputHidden id="hidden-eind"
							value="#{tirController.tir.route.eindpunt}"></h:inputHidden>
						<h:inputHidden id="hidden-tussenstops"
							value="#{tirController.route.tussenstops}"></h:inputHidden>
						<div style="margin: 0 auto; width: 600px; height: 600px;" id="map"></div>
						<div class="col-md-6">
							<h:outputLabel value ="Theoretic Departure Time :"/>
							<h:outputLabel id="vertrekT"/>
						</div>
					</div>
					<div class="row" style="margin: 10px;">
						<h:form>
							<h:panelGroup rendered="#{!tirController.tir.goedgekeurd}">
								<h:commandButton value="Cancel request"
									class="btn btn-primary pull-left"
									action="#{tirController.deleteRitRequest(tirController.tir.id)}"
									style="float: left;text-decoration:none; padding:5px;"></h:commandButton>
							</h:panelGroup>
						</h:form>
					</div>
				</div>
			</div>
		</div>
	</div>
	<script
		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUI3IbCN38MjQJgCJptMXN4NluM7EdHns&amp;libraries=places,geometry&amp;callback=PlaceAutocompleteSearch&amp;fields=formatted_address&amp;callback=initMap"
		async="" defer=""></script>
	<script>
	var dates = {
		    convert:function(d) {
		        // Converts the date in d to a date-object. The input can be:
		        //   a date object: returned without modification
		        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
		        //   a number     : Interpreted as number of milliseconds
		        //                  since 1 Jan 1970 (a timestamp) 
		        //   a string     : Any format supported by the javascript engine, like
		        //                  "YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
		        //  an object     : Interpreted as an object with year, month and date
		        //                  attributes.  **NOTE** month is 0-11.
		        return (
		            d.constructor === Date ? d :
		            d.constructor === Array ? new Date(d[0],d[1],d[2]) :
		            d.constructor === Number ? new Date(d) :
		            d.constructor === String ? new Date(d) :
		            typeof d === "object" ? new Date(d.year,d.month,d.date) :
		            NaN
		        );
		    },
		    compare:function(a,b) {
		        // Compare two dates (could be of any type supported by the convert
		        // function above) and returns:
		        //  -1 : if a &lt; b
		        //   0 : if a = b
		        //   1 : if a &gt; b
		        // NaN : if a or b is an illegal date
		        // NOTE: The code inside isFinite does an assignment (=).
		        return (
		            isFinite(a=this.convert(a).valueOf()) &amp;&amp;
		            isFinite(b=this.convert(b).valueOf()) ?
		            (a&gt;b)-(a&lt;b) :
		            NaN
		        );
		    },
		    
		}
		function initMap() {
			var directionsService = new google.maps.DirectionsService;
			var directionsRenderer = new google.maps.DirectionsRenderer;
			let map = new google.maps.Map(document.getElementById('map'), {
				zoom : 6,
				center : {
					lat : 51.051410,
					lng : 3.726115
				}
			});
			directionsRenderer.setMap(map);

			calculateAndDisplayRoute(directionsService, directionsRenderer);

			function calculateAndDisplayRoute(directionsService,
					directionsRenderer) {
				var beginpunt = document.getElementById('hidden-beginpunt').value;
				var eindpunt = document.getElementById('hidden-eindpunt').value;
				console.log("Extra tussenstop:" + beginpunt);
				console.log("Extra tussenstop:" + eindpunt);
				var waypts = [];
				//de waypointen pushen, van de huidige rit en van alle geaccepteerde tussenstops
				waypts.push({
					location : beginpunt,
					stopover : true
				});
				waypts.push({
					location : eindpunt,
					stopover : true
				});
				var ritten = document.getElementById('hidden-tussenstops').value
						.split("|");
				console.log(ritten);
				if (ritten.length > 1) {
					console.log(ritten.length);
					ritten.forEach(function(item, index, array) {
						console.log(item, index);
						waypts.push({
							location : item,
							stopover : true
						});
					});
				}
				directionsService.route({
					origin : document.getElementById('hidden-start').value,
					destination : document.getElementById('hidden-eind').value,
					waypoints : waypts,
					optimizeWaypoints : true,
					travelMode : 'DRIVING'
				}, function(response, status) {
					if (status === 'OK') {
						directionsRenderer.setDirections(response);
						var route = response.routes[0];
						console.log(route);
						console.log(response);
						//per route leg de totale duration optellen om de overall duration te berekenen
						route.legs.forEach(function (item, index, array) {
		  					  console.log(item.end_address, index);
								
									if("#{tirController.tir.eindpunt}"==item.end_address){
										console.log(index);
										indexV = index;
									}
								
									if("#{tirController.tir.beginpunt}"==item.end_address){
										console.log(index);
										indexA = index;
									}
								
							});
						
						var wiebenik= route.legs.forEach(testFunction); 
						

					} else {
						Alert();
					}
					
				});
			}
			var TOTDuration=0;
	      	var theVertrTijd=0;
	      	var tijdOmweg = 0;
	      	var tijdVoorPrijs=0;
	      	function testFunction(item, index){
	      		console.log(indexV);
	      		console.log(indexA);
	      		var ind = 0;
	      		
	      		
	      			//hier dan ook de totale omweg duration berekenen
					if(index &lt;= indexV){
						console.log("Vertrekpunt van de nieuwe rit= " +index);
						console.log("HIER: " + item.duration.value);
						ind = index;
						tijdOmweg =(typeof tijdOmweg==='undefined') ? item.duration.value : tijdOmweg+item.duration.value;
					}
				
	      		if(index == ind){
	      			console.log(tijdOmweg);
	      			var DateTimeBegin = new Date("#{tirController.route.vertrektijd}");
	      			theVertrTijd = new Date(DateTimeBegin.getTime() + (Math.ceil(tijdOmweg/60))*60000);
	      			console.log(theVertrTijd);
	      		}
	      		
					if(index &lt;= indexA){
						console.log("Eindpunt van de nieuwe rit= " +index);
						tijdVoorPrijs =(typeof tijdVoorPrijs==='undefined') ? item.duration.value : tijdVoorPrijs+item.duration.value;
						
					}
				
	      		
	      		console.log(tijdOmweg);
	      		
	      		
	      		
	      		
	      		console.log(item.duration.value);
	      		TOTDuration = TOTDuration + item.duration.value;
	      		console.log(TOTDuration);
	      		
	      		var totDinmin = Math.ceil(TOTDuration/60);
	      		console.log("In minuten: " + totDinmin);
	      		var DateTimeBegin = new Date("#{tirController.route.vertrektijd}");
	      		console.log("timestamp Begintijd");
	      		console.log(DateTimeBegin);
	      		var DateTimeEind = new Date("#{tirController.route.eindtijd}");
	      		console.log("timestamp aankomsttijd");
	      		console.log(DateTimeEind);
	      		var newDateobj = new Date(DateTimeBegin.getTime() + totDinmin*60000);
	      		console.log("Begintijd + minuten met omweg");
	      		console.log(newDateobj);
	      	//deze date vegelijken met de originele aankomst date om te checken of de route wel mogelijk is
	      		var test = dates.compare(DateTimeEind,newDateobj);
	      		console.log(test);
	      		if(test == 1){
	      		
	      			var VertrekP = new Date(theVertrTijd.getTime() );
	      		//	document.getElementById('createRoute:vertrekT').innerHTML = VertrekP;
	      			VertrekP.setHours(VertrekP.getHours()+2) 
	      			var dateStr =
	      			  ("00" + (VertrekP.getMonth() + 1)).slice(-2) + "/" +
	      			  ("00" + VertrekP.getDate()).slice(-2) + "/" +
	      			VertrekP.getFullYear() + " " +
	      			  ("00" + VertrekP.getHours()).slice(-2) + ":" +
	      			  ("00" + VertrekP.getMinutes()).slice(-2) + ":" +
	      			  ("00" + VertrekP.getSeconds()).slice(-2);
	      			console.log(dateStr);
	      			
	      			
	      			
	      			
	      			
	      			VertrekP.setHours(VertrekP.getHours()-2) 
	      			dateStr =
	      			  ("00" + (VertrekP.getMonth() + 1)).slice(-2) + "/" +
	      			  ("00" + VertrekP.getDate()).slice(-2) + "/" +
	      			VertrekP.getFullYear() + " " +
	      			  ("00" + VertrekP.getHours()).slice(-2) + ":" +
	      			  ("00" + VertrekP.getMinutes()).slice(-2);
	      			console.log(dateStr);
	      			document.getElementById('vertrekT').innerHTML = dateStr;
	      		} else {
	      			
	      			/* console.log("ONMOGELIJK") */
	      		}
	      		
	      		
	      	}      
	          
		function Alert(){
			
			window.alert('The driver can\'t arrive on time with these pickup or dropoff points.\nPlease choose a different pickup or dropoff point.');
			

		}

	}
	</script>
</body>
</html>