<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui"> 

<h:head>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"/>

  <title>
    <ui:insert name="title">Book in on a Route</ui:insert>
  </title>
 <style>
 .mapinv{
 display: none;
 }
 #map {
        height: 100%;
      }
 /* Always set the map height explicitly to define the size of the div
 * element that contains the map. */
#map {
  height: 100%;
}

.mapinv{
  display: none;
}


 </style>
<meta name="viewport" content="initial-scale=1.0" />
<meta charset="utf-8" />
<f:metadata>
		<f:viewParam name="route" value="#{tirController.route.id}" />
		<f:viewAction action="#{tirController.findRoute}" />
		<f:viewAction action="#{tirController.setTussenstops()}" />
	</f:metadata>

</h:head> 

<h:body> 
<h:form method="post" id="homeform">
  <h:commandButton value="Home" class="btn btn-primary pull-left" action="#{userController.goToIndexD()}" style="float: left;text-decoration:none; padding:5px;" />
 </h:form>

<div class="jumbotron jumbotron-sm">
    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-lg-12">
            	
                <h1 class="h1">
                    Route to: #{tirController.route.eindpunt}! <small></small></h1>
                    
            </div>
        </div>
    </div>
</div>




<div class="container">
    <div class="row">
        <div class="col-md-8">
        <div style="margin: 0 auto; width: 600px; height: 600px;" id="map"></div>
         
            <div class="well well-sm">
               <h2>Laatste aankomsttijd: #{tirController.route.eindtijd}</h2>
					<h2>Aantal vrije zitplaatsen:
						#{tirController.route.maxPersonen}</h2>
					<br />
				<h:form method="post" id="createRoute">
					<div class="row">
						<div class="col-md-6">
	              			
	              			<div class="form-group">
		    					<h:outputLabel value="Vertrek Adres: "/>
		  						<input required="required" id="vertrekAdress" type="text" />
		  						
		  						<h:inputHidden id="pleaseGodWork" value="#{tirController.tir.beginpunt}"/>
	  						</div>
	  						<div class = "form-group">
	  						<h:outputLabel value="Aankomst adress: "/>
		  						<input required="required" id="aankomstAdress" type ="text">
		  						</input>
		  						<h:inputHidden id="pleaseGodWorkTOO" value="#{tirController.tir.eindpunt}" />
	  						</div>
	  						<dir class = "form-group">
	  						<h:outputLabel value="Aantal Personen: "/>
	  						<h:selectOneMenu value="#{tirController.tir.aantalPersonen}">
   								 <f:selectItem itemValue="1" itemLabel="1" />
   								 <f:selectItem itemValue="2" itemLabel="2" />
   								 <f:selectItem itemValue="3" itemLabel="3" />
							</h:selectOneMenu>
	  						</dir>
	  						<div class = "form-group">
	  							<h:inputHidden id="idroute" value = "#{tirController.route.id}"></h:inputHidden>
	  						
	  						</div>
	  						<div class = "form-group">
	  						<h:outputLabel value = "Voorgestelde vertrektijd: "></h:outputLabel>
	  						<br />
	  							<h:outputLabel id ="vertrekT" value="Na ingeven van de geprefereerde vertrek en eindpunten, druk op de Check me knop" />
	  							<h:inputHidden id="VertrekTijd" value="#{input}"  />
	  						</div>
	  						<div class ="form-group">
	  							<h:outputLabel value="Prijs in Euro: "></h:outputLabel>
	  							<h:outputLabel id = "prijs" value = "Na ingeven van de geprefereerde vertrek en eindpunten, druk op de Check me knop" />
	  							<h:inputHidden id="Prijs" value="#{tirController.tir.prijs}" />
	  						</div>
	  						
	  						
	  						<div class = "form-group">
	  						
								<h:commandButton style="display:none;text-decoration:none; padding:3px; width:115px;"  value = "Verzend verzoek"  action = "#{tirController.test(tirController.route.id,input)}" id = "MakeRoute" class="btn btn-primary "/>
	  						</div>
	  					</div>
					</div>
				</h:form>
				<button align="center" onclick="initMap();">Check me</button>
				<h:inputHidden id="hidden-tussenstops"
			value="#{tirController.route.tussenstops}"></h:inputHidden>
			</div>
		</div>
	</div>
</div>


	<script
		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUI3IbCN38MjQJgCJptMXN4NluM7EdHns&amp;libraries=places,geometry&amp;callback=PlaceAutocompleteSearch&amp;fields=formatted_address&amp;callback=initMap"
		async="" defer=""></script>
		<script >
		document.getElementById('createRoute:idroute').value = #{tirController.route.id};
		
		
		
	var dates = {
		    convert:function(d) {
		        // Converts the date in d to a date-object. The input can be:
		        //   a date object: returned without modification
		        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.
		        //   a number     : Interpreted as number of milliseconds
		        //                  since 1 Jan 1970 (a timestamp) 
		        //   a string     : Any format supported by the javascript engine, like
		        //                  "YYYY/MM/DD", "MM/DD/YYYY", "Jan 31 2009" etc.
		        //  an object     : Interpreted as an object with year, month and date
		        //                  attributes.  **NOTE** month is 0-11.
		        return (
		            d.constructor === Date ? d :
		            d.constructor === Array ? new Date(d[0],d[1],d[2]) :
		            d.constructor === Number ? new Date(d) :
		            d.constructor === String ? new Date(d) :
		            typeof d === "object" ? new Date(d.year,d.month,d.date) :
		            NaN
		        );
		    },
		    compare:function(a,b) {
		        // Compare two dates (could be of any type supported by the convert
		        // function above) and returns:
		        //  -1 : if a &lt; b
		        //   0 : if a = b
		        //   1 : if a &gt; b
		        // NaN : if a or b is an illegal date
		        // NOTE: The code inside isFinite does an assignment (=).
		        return (
		            isFinite(a=this.convert(a).valueOf()) &amp;&amp;
		            isFinite(b=this.convert(b).valueOf()) ?
		            (a&gt;b)-(a&lt;b) :
		            NaN
		        );
		    },
		    
		}

      function initMap() {
        var directionsService = new google.maps.DirectionsService;
        var directionsRenderer = new google.maps.DirectionsRenderer;
        let map = new google.maps.Map(document.getElementById('map'), {
          zoom: 6,
          center: {lat: 51.051410, lng: 3.726115}
        });
        directionsRenderer.setMap(map);
        
		
          calculateAndDisplayRoute(directionsService, directionsRenderer);
          PlaceAutocompleteSearch();
          
          var indexV=0;
          var indexA=0;
          var bool = false;
          function calculateAndDisplayRoute(directionsService, directionsRenderer) {
      		var beginpunt = document.getElementById('createRoute:pleaseGodWork').value;
      		var eindpunt =document.getElementById('createRoute:pleaseGodWorkTOO').value;
      		var waypts = [];
			var ritten = document.getElementById('hidden-tussenstops').value.split("|");
			console.log(ritten);
			if(ritten.length>1){
				console.log(ritten.length);
				ritten.forEach(function (item, index, array) {
					  console.log(item, index);
						waypts.push({
							location : item,
							stopover : true
						});
					});
				}
      		if(document.getElementById('createRoute:pleaseGodWork').value !== ""){
      			console.log("KIEKEBOE");
      			TOTDuration=0;
      			waypts.push({
      				location: beginpunt,
      				stopover: true
      			});
      		}
      		if(document.getElementById('createRoute:pleaseGodWorkTOO').value !== ""){
      			console.log("KIEKEBOE");
      			waypts.push({
      				location: eindpunt,
      				stopover: true
      			});
      		}
      		/* var checkboxArray = document.getElementById('waypoints');
      		for (var i = 0; i &lt; checkboxArray.length; i++) {
      		  if (checkboxArray.options[i].selected) {
      		    waypts.push({
      		      location: checkboxArray[i].value,
      		      stopover: true
      		    });
      		  }
      		} */

      		directionsService.route({
      			origin : "#{tirController.route.beginpunt}",
      			destination : "#{tirController.route.eindpunt}",
      			waypoints : waypts,
      			optimizeWaypoints : true,
      			travelMode : 'DRIVING'
      		}, function(response, status) {
      			if (status === 'OK') {
      				directionsRenderer.setDirections(response);
      				var route = response.routes[0];
      				console.log(route);
      				console.log(response);
      				
      				route.legs.forEach(function (item, index, array) {
  					  console.log(item.end_address, index);
						if(document.getElementById('createRoute:pleaseGodWork').value !== "" ){
							if(document.getElementById('createRoute:pleaseGodWork').value==item.end_address){
								console.log(index);
								indexV = index;
							}
						}
						if(document.getElementById('createRoute:pleaseGodWorkTOO').value !== "" ){
							if(document.getElementById('createRoute:pleaseGodWorkTOO').value==item.end_address){
								console.log(index);
								indexA = index;
							}
						}
					});
      				 			
      				// For each route, summarize total time.
      				var wiebenik= route.legs.forEach(testFunction); 
      				if(bool == true){
      					Alert();
      				}
      				console.log(wiebenik);
      			} else {
      				window.alert('Directions request failed due to ' + status);
      			}
      		});
      	}
      	var TOTDuration=0;
      	var theVertrTijd=0;
      	var tijdOmweg = 0;
      	var tijdVoorPrijs=0;
      	function testFunction(item, index){
      		console.log(indexV);
      		console.log(indexA);
      		var ind = 0;
      		
      		
      		
      		if(document.getElementById('createRoute:pleaseGodWork').value !== "" ){
				if(index &lt;= indexV){
					console.log("Vertrekpunt van de nieuwe rit= " +index);
					console.log("HIER: " + item.duration.value);
					ind = index;
					tijdOmweg =(typeof tijdOmweg==='undefined') ? item.duration.value : tijdOmweg+item.duration.value;
				}
			}
      		if(index == ind){
      			console.log(tijdOmweg);
      			var DateTimeBegin = new Date("#{tirController.route.vertrektijd}");
      			theVertrTijd = new Date(DateTimeBegin.getTime() + (Math.ceil(tijdOmweg/60))*60000);
      			console.log(theVertrTijd);
      		}
      		
      		if(document.getElementById('createRoute:pleaseGodWorkTOO').value !== "" ){
				if(index &lt;= indexA){
					console.log("Eindpunt van de nieuwe rit= " +index);
					tijdVoorPrijs =(typeof tijdVoorPrijs==='undefined') ? item.duration.value : tijdVoorPrijs+item.duration.value;
					
				}
			}
      		if(index == indexA){
      			console.log(tijdVoorPrijs);
      			calculatePrice(tijdVoorPrijs);
      		}
      		console.log(tijdOmweg);
      		
      		
      		
      		
      		console.log(item.duration.value);
      		TOTDuration = TOTDuration + item.duration.value;
      		console.log(TOTDuration);
      		
      		var totDinmin = Math.ceil(TOTDuration/60);
      		console.log("In minuten: " + totDinmin);
      		var DateTimeBegin = new Date("#{tirController.route.vertrektijd}");
      		console.log("timestamp Begintijd");
      		console.log(DateTimeBegin);
      		var DateTimeEind = new Date("#{tirController.route.eindtijd}");
      		console.log("timestamp aankomsttijd");
      		console.log(DateTimeEind);
      		var newDateobj = new Date(DateTimeBegin.getTime() + totDinmin*60000);
      		console.log("Begintijd + minuten met omweg");
      		console.log(newDateobj);
      		var test = dates.compare(DateTimeEind,newDateobj);
      		console.log(test);
      		if(test == 1){
      			var VertrekP = new Date(theVertrTijd.getTime() );
      			document.getElementById('createRoute:vertrekT').innerHTML = VertrekP;
      			VertrekP.setHours(VertrekP.getHours()+2) 
      			var dateStr =
      			  ("00" + (VertrekP.getMonth() + 1)).slice(-2) + "/" +
      			  ("00" + VertrekP.getDate()).slice(-2) + "/" +
      			VertrekP.getFullYear() + " " +
      			  ("00" + VertrekP.getHours()).slice(-2) + ":" +
      			  ("00" + VertrekP.getMinutes()).slice(-2) + ":" +
      			  ("00" + VertrekP.getSeconds()).slice(-2);
      			console.log(dateStr);
      			
      			document.getElementById('createRoute:MakeRoute').style.display= 'inline';
      			document.getElementById('createRoute:VertrekTijd').value = dateStr;
      		} else {
      			if(document.getElementById('createRoute:pleaseGodWork').value !== ""){
      				bool = true;
      				
      			}
      			/* console.log("ONMOGELIJK") */
      		}
      		
      		
      	}      
          
	function Alert(){
		
		window.alert('De Route zal niet op tijd aankomen met deze vertrek en eindpunten');
		document.getElementById('createRoute:MakeRoute').style.display= 'none';

	}
	function PlaceAutocompleteSearch() {

		var options = {
			types : [ 'address' ]
		};
		var componentForm = {
			street_number : 'short_name',
			route : 'long_name',
			locality : 'long_name',
			administrative_area_level_1 : 'short_name',
			country : 'long_name',
			postal_code : 'short_name'
		};
		var input = document.getElementById('vertrekAdress');
		var input1 = document.getElementById('aankomstAdress');
	    var autocomplete1= new google.maps.places.Autocomplete(input1, options);
		var autocomplete = new google.maps.places.Autocomplete(input, options);
		var place = autocomplete.getPlace();
		var place1 = autocomplete1.getPlace();
	
		autocomplete.addListener('place_changed', fillInAddress);
		autocomplete1.addListener('place_changed', fillInAddress1);

		/*   document.getElementById('viewRoute:pleaseGodWork').value = place.formatted_address; */
		console.log(document.getElementById('createRoute:pleaseGodWork').value);
		document.getElementById('createRoute:pleaseGodWorkTOO').value = place1.formatted_address;
	    

		function fillInAddress() {
			// Get the place details from the autocomplete object.
			var place = autocomplete.getPlace();
			console.log(place);

			document.getElementById('createRoute:pleaseGodWork').value = place.formatted_address;
			console.log(document.getElementById('createRoute:pleaseGodWork').value);
			
		}
		function fillInAddress1() {
		  	  // Get the place details from the autocomplete object.
		  	  
		  	  var place1=autocomplete1.getPlace();

		  	 
		  	  document.getElementById('createRoute:pleaseGodWorkTOO').value = place1.formatted_address;
		  	}
		

	}
	
	function calculatePrice(tijd){
		//iets in functie van de omweg die de driver moet maken
		//mss tijd tussen rit begin --> eindpunt
		console.log(Math.floor(tijd/200));
		document.getElementById('createRoute:prijs').innerHTML= Math.floor(tijd/200);
		document.getElementById('createRoute:Prijs').value= Math.floor(tijd/200);
		
		
	}
	
	}
	
	console.log(document.getElementById('hidden-tussenstops').value.split("|"));
	
	
</script>



</h:body>

</html>